#include "simpletools.h"                      // Include simple tools
#include "adcDCpropab.h"
#include "servo.h"

int main()
{
  pause(1000);
  adc_init(21, 20, 19, 18);                   // CS=21, SCL=20, DO=19, DI=18 
  while(1)
  { 
    ///////SWITCH////////
    int button = input(11);
    if (button == 1)
    {
      HappyState();
    }   
    pause(100);     
    ///////SWITCH////////
    
    ////////PING/////////
    float i = -1;
    i = Ping(12,13);           
    i = i / 148;                      //divide the ping by 148 to get inches, or by 54 to get centimeters
    if(i < 10)
    {
      servo_speed(14,-200);
      servo_speed(15,200);
      pause(100);
    }  
    else
    {
      servo_speed(14,200);
      servo_speed(15,-200);
      pause(100);
    }  
    ////////PING/////////
  }  
}


///////////***EMOTION***///////////
int HappyState()
{
  pause(1000);
  while(1)
  {
    ///////SWITCH////////
    int button = input(11);
    if (button == 1)
    {
      SadState();
    }
    ///////SWITCH////////  
    
    servo_speed(14,0);
    servo_speed(15,0);
    
    adc_init(21, 20, 19, 18);
    float v1;
  
    v1 = adc_volts(2);                  // Check A/D 1
    print("%f V\n", v1);                // Display volts
  
    if(v1 > 0.5)
    {
      InteractHappy();
    }      
    pause(100);                        // Wait 1/10 s
  }     
}  

int InteractHappy()
{
  servo_speed(14,200);
  servo_speed(15,200);
  high(26);
  high(27);
  pause(2000);
  low(26);
  low(27);
  return;
}

int SadState()
{
  pause(1000);
  while(1)
  {
    ///////SWITCH////////
    int button = input(11);
    if (button == 1)
    {
      FearState();
    }
    ///////SWITCH//////// 
    
    ////////PING/////////
    float i = -1;
    i = Ping(12,13);           
    i = i / 148;                      //divide the ping by 148 to get inches, or by 54 to get centimeters
    if(i < 10)
    {
      InteractSad();
    }  
    else
    {
      servo_speed(14,200);
      servo_speed(15,-200);
      pause(100);
    }  
    ////////PING/////////
  }    
}  

int InteractSad()
{
   servo_speed(14, -200);
   servo_speed(15, 200);
   pause(100);
   return;
}

int FearState()
{
  pause(1000);
  while(1)
  {
    ///////SWITCH////////
    int button = input(11);                    
    if (button == 1)
    {
      AngerState();
    }
    ///////SWITCH////////
    
    float LDRVoltageValue;      
    high(7);
    high(8);
    high(9);
    pause(1000);
    low(7);
    low(8);
    low(9);
                   
    LDRVoltageValue = adc_volts(0);            // Check A/D 0      
    print("button = %d\n", button);
    print("LDR Value = %f \n", LDRVoltageValue); // Display LDR voltage value
    Jitter();                                 // Calling Jitter Function
    
    if (LDRVoltageValue < 2.5)                  // Checking to see LDR Value
    {
      InteractFear();
    }
  }   
}

int InteractFear()
{
  LetsGetIt();
  
  //Turning the Robot 180 degrees
  servo_speed(14, 200);
  pause(3000);
  
  servo_speed(14, 0);                     // Move pin 14 motor by speed 0
  servo_speed(15, 0);                     // Move pin 15 motor by speed 0
  pause(2000);                            // Pause for 2 seconds
  return;
}

int AngerState()
{
  pause(1000);
  while(1)
  { 
    ///////SWITCH////////
    int button = input(11);
    if (button == 1)
    {
      main();
    }   
    ///////SWITCH////////
    
    float FlexSensor;
    FlexSensor = adc_volts(1);                 // Check A/D 1
    if(FlexSensor > 0.9 || FlexSensor < 0.7)
    {
      InteractiveAnger();
    }      
    servo_speed(14,0);
    servo_speed(15,0);
    pause(100);                               // Wait 1/10 s
  }
}  

int InteractiveAnger()
{
  servo_speed(14, 200);
  servo_speed(15, -200);
  pause(100);
  return;
}  
///////////***EMOTION***///////////


///////////***MISC***//////////////
int LetsGetIt()
{
  int LightTime = 100;
  int FrequencyTime = 200;
  int FrequencyLevel = 500;
  
  int count = 0;              // Count value          
  int x = 100;
  
  while(x < 2000)
  {
    freqout(1,20,x);
    x = x + 10;
  }
                 
  while(count < 6)
  {
    freqout(1, FrequencyTime, FrequencyLevel);
    high(26);
    low(27);
    pause(LightTime);
    high(27);
    low(26);
    pause(LightTime);
    count++;
    LightTime = 75 + LightTime;
    FrequencyLevel = FrequencyLevel + 100;
    FrequencyTime = FrequencyTime + 100;
  }
  return;
}  
  
int Jitter()
{
  servo_speed(14, 100);                      // Move pin 14 motor by speed 100
  servo_speed(15, -100);                     // Move pin 15 motor by speed -100
  pause(200);                               // Pause for 0.1 seconds
  servo_speed(14, -100);                      // Move pin 14 motor by speed 100
  servo_speed(15, 100);                     // Move pin 15 motor by speed -100
  pause(200);                               // Pause for 0.1 seconds
  return;
}    

int Ping(int trig, int echo)//trig is trigger pin, echo is echo pin
{
  low(trig);//set trig low for start pulse
  low(echo);//set echo low to be safe
  pulse_out(trig, 10);//send the minimum 10 ms pulse on trig to start a ping
  return pulse_in(echo, 1);//get the pulse duration back on echo pin
}
///////////***MISC***//////////////


///////////***MUSIC***/////////////
int WiiMii() {
freqout(1,100,210);
pause(500);
freqout(1,100,270);
pause(250);
freqout(1,100,320);
pause(500);
freqout(1,100,270);
pause(500);
freqout(1,100,210);
pause(250);
freqout(1,100,180);
pause(125);
freqout(1,100,180);
pause(125);
freqout(1,100,180);
pause(750);//rest
freqout(1,250,160);//slur
freqout(1,100,180);
pause(125);
freqout(1,100,210);
pause(125);
freqout(1,100,270);
pause(125);
freqout(1,100,320);
pause(500);
freqout(1,100,270);
pause(500);
freqout(1,100,210);
pause(250);
//slur
freqout(1,500,410);
freqout(1,250,380);
freqout(1,250,360);
pause(750);//rest
freqout(1,100,250);
pause(500);
freqout(1,100,320);
pause(250);
freqout(1,100,210);
pause(500);
freqout(1,100,320);
pause(500);
//try to slur
freqout(1,250,250);
freqout(1,250,240);
freqout(1,100,320);
pause(500);
freqout(1,100,240);
pause(250);
freqout(1,100,210);
pause(500);
freqout(1,100,200);
pause(500);
freqout(1,100,200);
pause(125);
freqout(1,100,200);
pause(125);
freqout(1,100,200);
pause(725);//rest
freqout(1,100,200);
pause(125);
freqout(1,100,200);
pause(125);
freqout(1,100,200);
pause(1000);
return;
}
///////////***MUSIC***/////////////
